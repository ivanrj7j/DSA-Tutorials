Algorithm for insertTerm taking in poly, coeff, exp_x, exp_y
Step 1) START
Step 2) IF `coeff` is equal to 0 THEN
Step 3)     RETURN
Step 4) INITIALIZE `current` = value of `poly`
Step 5) INITIALIZE `last` = NULL
Step 6) IF `current` is not equal to NULL THEN
Step 7)     IF `current`->`exp_x` is equal to `exp_x` AND `current`->`exp_y` is equal to `exp_y` THEN
Step 8)         SET `current`->`coeff` = `current`->`coeff` + `coeff`
Step 9)         RETURN
Step 10)    ELSE
Step 11)        SET `last` = `current`
Step 12)        SET `current` = `current`->`next`
Step 13)        GOTO Step 6
Step 14) ALLOCATE memory for `newTerm` of type PolyNode
Step 15) SET `newTerm`->`coeff` = `coeff`
Step 16) SET `newTerm`->`exp_x` = `exp_x`
Step 17) SET `newTerm`->`exp_y` = `exp_y`
Step 18) SET `newTerm`->`next` = NULL
Step 19) IF `poly` is equal to NULL THEN
Step 20)    SET `poly` = `newTerm`
Step 21) ELSE
Step 22)    SET `last`->`next` = `newTerm`
Step 23) STOP

Algorithm for displayPoly taking in poly
Step 1) START
Step 2) IF `poly` is equal to NULL THEN
Step 3)     PRINT "0"
Step 4)     RETURN
Step 5) INITIALIZE `temp` = `poly`
Step 6) INITIALIZE `first_term` = 1
Step 7) IF `temp` is not equal to NULL THEN
Step 8)     IF `temp`->`coeff` is not equal to 0 THEN
Step 9)         IF `first_term` is equal to 0 AND `temp`->`coeff` is greater than 0 THEN
Step 10)             PRINT " + "
Step 11)        ELSE IF `first_term` is equal to 0 AND `temp`->`coeff` is less than 0 THEN
Step 12)             PRINT " - "
Step 13)        SET `c` = `temp`->`coeff`. IF `temp`->`coeff` is greater than 0, THEN `c` = `temp`->`coeff`. ELSE `c` = -`temp`->`coeff`
Step 14)        IF `first_term` is equal to 1 AND `temp`->`coeff` is less than 0 THEN
Step 15)            PRINT "-"
Step 16)        PRINT "%dx^%dy^%d", `c`, `temp`->`exp_x`, `temp`->`exp_y`
Step 17)        SET `first_term` = 0
Step 18)    SET `temp` = `temp`->`next`
Step 19)    GOTO Step 7
Step 20) IF `first_term` is equal to 1 THEN
Step 21)    PRINT "0"
Step 22) PRINT new line
Step 23) STOP

Algorithm for addPolynomials taking in poly1, poly2
Step 1) START
Step 2) INITIALIZE `result` = NULL
Step 3) INITIALIZE `p1` = `poly1`
Step 4) INITIALIZE `p2` = `poly2`
Step 5) IF `p1` is not equal to NULL THEN
Step 6)     CALL Algorithm for insertTerm taking in `result`, `p1`->`coeff`, `p1`->`exp_x`, `p1`->`exp_y`
Step 7)     SET `p1` = `p1`->`next`
Step 8)     GOTO Step 5
Step 9) IF `p2` is not equal to NULL THEN
Step 10)    CALL Algorithm for insertTerm taking in `result`, `p2`->`coeff`, `p2`->`exp_x`, `p2`->`exp_y`
Step 11)    SET `p2` = `p2`->`next`
Step 12)    GOTO Step 9
Step 13) RETURN `result`
Step 14) STOP

Algorithm for freePoly taking in poly
Step 1) START
Step 2) INITIALIZE `current` = `poly`
Step 3) IF `current` is not equal to NULL THEN
Step 4)     SET `next` = `current`->`next`
Step 5)     FREE(`current`)
Step 6)     SET `current` = `next`
Step 7)     GOTO Step 3
Step 8) SET `poly` = NULL
Step 9) STOP

Algorithm
Step 1) START
Step 2) INITIALIZE `poly1` = NULL, `poly2` = NULL, `sum` = NULL
Step 3) INITIALIZE `n`, `i`, `c`, `ex`, `ey`
Step 4) PRINT "--- Polynomial 1 ---"
Step 5) PRINT "Enter number of terms: "
Step 6) READ `n`
Step 7) INITIALIZE `i` = 0
Step 8) IF `i` < `n` THEN
Step 9)     PRINT "Enter coeff, exp_x, exp_y for term %d: ", `i` + 1
Step 10)    READ `c`, `ex`, `ey`
Step 11)    CALL Algorithm for insertTerm taking in `poly1`, `c`, `ex`, `ey`
Step 12)    SET `i` = `i` + 1
Step 13)    GOTO Step 8
Step 14) PRINT new line
Step 15) PRINT "--- Polynomial 2 ---"
Step 16) PRINT "Enter number of terms: "
Step 17) READ `n`
Step 18) SET `i` = 0
Step 19) IF `i` < `n` THEN
Step 20)    PRINT "Enter coeff, exp_x, exp_y for term %d: ", `i` + 1
Step 21)    READ `c`, `ex`, `ey`
Step 22)    CALL Algorithm for insertTerm taking in `poly2`, `c`, `ex`, `ey`
Step 23)    SET `i` = `i` + 1
Step 24)    GOTO Step 19
Step 25) PRINT new line
Step 26) PRINT "Polynomial 1: "
Step 27) CALL Algorithm for displayPoly taking in `poly1`
Step 28) PRINT "Polynomial 2: "
Step 29) CALL Algorithm for displayPoly taking in `poly2`
Step 30) SET `sum` = CALL Algorithm for addPolynomials taking in `poly1`, `poly2`
Step 31) PRINT new line
Step 32) PRINT "Sum: "
Step 33) CALL Algorithm for displayPoly taking in `sum`
Step 34) CALL Algorithm for freePoly taking in `poly1`
Step 35) CALL Algorithm for freePoly taking in `poly2`
Step 36) CALL Algorithm for freePoly taking in `sum`
Step 37) RETURN 0
Step 38) STOP