Algorithm for createStudent taking in num, name, mark
Step 1) START
Step 2) ALLOCATE memory for `newNode` of type StudentNode
Step 3) SET `newNode`->`number` = `num`
Step 4) COPY `name` to `newNode`->`name`
Step 5) SET `newNode`->`total_mark` = `mark`
Step 6) SET `newNode`->`next` = NULL
Step 7) RETURN `newNode`
Step 8) STOP

Algorithm for insertStudent taking in head, num, name, mark
Step 1) START
Step 2) SET `newStudent` = CALL Algorithm for createStudent taking in `num`, `name`, `mark`
Step 3) SET `newStudent`->`next` = `head`
Step 4) SET `head` = `newStudent`
Step 5) PRINT "Inserted student %d.", `num`
Step 6) STOP

Algorithm for deleteStudent taking in head, num
Step 1) START
Step 2) SET `temp` = `head`
Step 3) SET `prev` = NULL
Step 4) IF `temp` is not equal to NULL AND `temp`->`number` is equal to `num` THEN
Step 5)     SET `head` = `temp`->`next`
Step 6)     FREE(`temp`)
Step 7)     PRINT "Deleted student %d.", `num`
Step 8)     RETURN
Step 9) IF `temp` is not equal to NULL AND `temp`->`number` is not equal to `num` THEN
Step 10)    SET `prev` = `temp`
Step 11)    SET `temp` = `temp`->`next`
Step 12)    GOTO Step 4
Step 13) IF `temp` is equal to NULL THEN
Step 14)    PRINT "Student with number %d not found.", `num`
Step 15)    RETURN
Step 16) SET `prev`->`next` = `temp`->`next`
Step 17) FREE(`temp`)
Step 18) PRINT "Deleted student %d.", `num`
Step 19) STOP

Algorithm for searchStudent taking in head, num
Step 1) START
Step 2) SET `current` = `head`
Step 3) IF `current` is not equal to NULL THEN
Step 4)     IF `current`->`number` is equal to `num` THEN
Step 5)         PRINT "Found Student -> Number: %d, Name: %s, Marks: %.2f", `current`->`number`, `current`->`name`, `current`->`total_mark`
Step 6)         RETURN
Step 7)     SET `current` = `current`->`next`
Step 8)     GOTO Step 3
Step 9) PRINT "Student with number %d not found.", `num`
Step 10) STOP

Algorithm for sortList taking in head
Step 1) START
Step 2) IF `head` is equal to NULL OR `head`->`next` is equal to NULL THEN
Step 3)     IF `head` is not equal to NULL THEN
Step 4)         PRINT "List sorted or has one element."
Step 5)     ELSE
Step 6)         PRINT "List is empty, cannot sort."
Step 7)     RETURN
Step 8) INITIALIZE `swapped`
Step 9) INITIALIZE `ptr1`
Step 10) INITIALIZE `lptr` = NULL
Step 11) SET `swapped` = 0
Step 12) SET `ptr1` = `head`
Step 13) IF `ptr1`->`next` is not equal to `lptr` THEN
Step 14)    IF `ptr1`->`number` > `ptr1`->`next`->`number` THEN
Step 15)        SET `tempNum` = `ptr1`->`number`
Step 16)        COPY `ptr1`->`name` to `tempName`
Step 17)        SET `tempMark` = `ptr1`->`total_mark`
Step 18)        SET `ptr1`->`number` = `ptr1`->`next`->`number`
Step 19)        COPY `ptr1`->`next`->`name` to `ptr1`->`name`
Step 20)        SET `ptr1`->`total_mark` = `ptr1`->`next`->`total_mark`
Step 21)        SET `ptr1`->`next`->`number` = `tempNum`
Step 22)        COPY `tempName` to `ptr1`->`next`->`name`
Step 23)        SET `ptr1`->`next`->`total_mark` = `tempMark`
Step 24)        SET `swapped` = 1
Step 25)    SET `ptr1` = `ptr1`->`next`
Step 26)    GOTO Step 13
Step 27) SET `lptr` = `ptr1`
Step 28) IF `swapped` is equal to 1 THEN
Step 29)    GOTO Step 11
Step 30) PRINT "List sorted by student number."
Step 31) STOP

Algorithm for displayStudents taking in head
Step 1) START
Step 2) IF `head` is equal to NULL THEN
Step 3)     PRINT "The student list is empty."
Step 4)     RETURN
Step 5) PRINT new line
Step 6) PRINT "--- Student List ---"
Step 7) SET `temp` = `head`
Step 8) IF `temp` is not equal to NULL THEN
Step 9)     PRINT "Number: %-5d | Name: %-20s | Marks: %.2f", `temp`->`number`, `temp`->`name`, `temp`->`total_mark`
Step 10)    SET `temp` = `temp`->`next`
Step 11)    GOTO Step 8
Step 12) PRINT "--------------------"
Step 13) STOP

Algorithm
Step 1) START
Step 2) SET `head` = NULL
Step 3) INITIALIZE `choice`, `num`
Step 4) INITIALIZE `name`
Step 5) INITIALIZE `mark`
Step 6) IF 1 THEN
Step 7)     PRINT new line
Step 8)     PRINT "--- Student Records Menu ---"
Step 9)     PRINT "1. Insert"
Step 10)    PRINT "2. Delete"
Step 11)    PRINT "3. Search"
Step 12)    PRINT "4. Sort"
Step 13)    PRINT "5. Display"
Step 14)    PRINT "6. Exit"
Step 15)    PRINT "Enter your choice: "
Step 16)    READ `choice`
Step 17)    IF `choice` is equal to 1 THEN
Step 18)        PRINT "Enter Number: "
Step 19)        READ `num`
Step 20)        PRINT "Enter Name: "
Step 21)        READ `name`
Step 22)        PRINT "Enter Mark: "
Step 23)        READ `mark`
Step 24)        CALL Algorithm for insertStudent taking in `head`, `num`, `name`, `mark`
Step 25)        CALL Algorithm for displayStudents taking in `head`
Step 26)    ELSE IF `choice` is equal to 2 THEN
Step 27)        PRINT "Enter Number to Delete: "
Step 28)        READ `num`
Step 29)        CALL Algorithm for deleteStudent taking in `head`, `num`
Step 30)        CALL Algorithm for displayStudents taking in `head`
Step 31)    ELSE IF `choice` is equal to 3 THEN
Step 32)        PRINT "Enter Number to Search: "
Step 33)        READ `num`
Step 34)        CALL Algorithm for searchStudent taking in `head`, `num`
Step 35)    ELSE IF `choice` is equal to 4 THEN
Step 36)        CALL Algorithm for sortList taking in `head`
Step 37)        CALL Algorithm for displayStudents taking in `head`
Step 38)    ELSE IF `choice` is equal to 5 THEN
Step 39)        CALL Algorithm for displayStudents taking in `head`
Step 40)    ELSE IF `choice` is equal to 6 THEN
Step 41)        PRINT "Exiting."
Step 42)        EXIT(0)
Step 43)    ELSE
Step 44)        PRINT "Invalid choice."
Step 45)    GOTO Step 6
Step 46) RETURN 0
Step 47) STOP